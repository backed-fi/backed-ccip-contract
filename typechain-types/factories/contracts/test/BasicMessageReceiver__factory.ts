/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BasicMessageReceiver,
  BasicMessageReceiverInterface,
} from "../../../contracts/test/BasicMessageReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestMessageDetails",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "enum BasicMessageReceiver.TokenVariant",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000ee738038062000ee7833981810160405281019062000037919062000153565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401620000a4919062000196565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620001b3565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011b82620000ee565b9050919050565b6200012d816200010e565b81146200013957600080fd5b50565b6000815190506200014d8162000122565b92915050565b6000602082840312156200016c576200016b620000e9565b5b60006200017c848285016200013c565b91505092915050565b62000190816200010e565b82525050565b6000602082019050620001ad600083018462000185565b92915050565b608051610d11620001d66000396000818161022201526102c90152610d116000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780633394e6f41461008157806385572ffb146100a4578063b0f479a1146100c0575b600080fd5b61006b6004803603810190610066919061048c565b6100de565b60405161007891906104d4565b60405180910390f35b6100896101b0565b60405161009b969594939291906105fc565b60405180910390f35b6100be60048036038101906100b99190610681565b610220565b005b6100c86102c5565b6040516100d591906106ca565b60405180910390f35b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101a957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080600080600080600054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160149054906101000a900467ffffffffffffffff16600254600460009054906101000a900460ff16600354955095509550955095509550909192939495565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b057336040517fd7f733340000000000000000000000000000000000000000000000000000000081526004016102a791906106ca565b60405180910390fd5b6102c2816102bd90610add565b6102ed565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b8060000151600081905550600080600080600085606001518060200190518101906103189190610c17565b9450945094509450945084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508260028190555081600460006101000a81548160ff021916908360018111156103b8576103b7610585565b5b02179055506001808111156103d0576103cf610585565b5b600460009054906101000a900460ff1660018111156103f2576103f1610585565b5b036104185760008180602001905181019061040d9190610cae565b905080600381905550505b505050505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61046981610434565b811461047457600080fd5b50565b60008135905061048681610460565b92915050565b6000602082840312156104a2576104a161042a565b5b60006104b084828501610477565b91505092915050565b60008115159050919050565b6104ce816104b9565b82525050565b60006020820190506104e960008301846104c5565b92915050565b6000819050919050565b610502816104ef565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053382610508565b9050919050565b61054381610528565b82525050565b600067ffffffffffffffff82169050919050565b61056681610549565b82525050565b6000819050919050565b61057f8161056c565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106105c5576105c4610585565b5b50565b60008190506105d6826105b4565b919050565b60006105e6826105c8565b9050919050565b6105f6816105db565b82525050565b600060c08201905061061160008301896104f9565b61061e602083018861053a565b61062b604083018761055d565b6106386060830186610576565b61064560808301856105ed565b61065260a0830184610576565b979650505050505050565b600080fd5b600060a082840312156106785761067761065d565b5b81905092915050565b6000602082840312156106975761069661042a565b5b600082013567ffffffffffffffff8111156106b5576106b461042f565b5b6106c184828501610662565b91505092915050565b60006020820190506106df600083018461053a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610733826106ea565b810181811067ffffffffffffffff82111715610752576107516106fb565b5b80604052505050565b6000610765610420565b9050610771828261072a565b919050565b600080fd5b610784816104ef565b811461078f57600080fd5b50565b6000813590506107a18161077b565b92915050565b6107b081610549565b81146107bb57600080fd5b50565b6000813590506107cd816107a7565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156107f8576107f76106fb565b5b610801826106ea565b9050602081019050919050565b82818337600083830152505050565b600061083061082b846107dd565b61075b565b90508281526020810184848401111561084c5761084b6107d8565b5b61085784828561080e565b509392505050565b600082601f830112610874576108736107d3565b5b813561088484826020860161081d565b91505092915050565b600067ffffffffffffffff8211156108a8576108a76106fb565b5b602082029050602081019050919050565b600080fd5b6108c781610528565b81146108d257600080fd5b50565b6000813590506108e4816108be565b92915050565b6108f38161056c565b81146108fe57600080fd5b50565b600081359050610910816108ea565b92915050565b60006040828403121561092c5761092b6106e5565b5b610936604061075b565b90506000610946848285016108d5565b600083015250602061095a84828501610901565b60208301525092915050565b60006109796109748461088d565b61075b565b9050808382526020820190506040840283018581111561099c5761099b6108b9565b5b835b818110156109c557806109b18882610916565b84526020840193505060408101905061099e565b5050509392505050565b600082601f8301126109e4576109e36107d3565b5b81356109f4848260208601610966565b91505092915050565b600060a08284031215610a1357610a126106e5565b5b610a1d60a061075b565b90506000610a2d84828501610792565b6000830152506020610a41848285016107be565b602083015250604082013567ffffffffffffffff811115610a6557610a64610776565b5b610a718482850161085f565b604083015250606082013567ffffffffffffffff811115610a9557610a94610776565b5b610aa18482850161085f565b606083015250608082013567ffffffffffffffff811115610ac557610ac4610776565b5b610ad1848285016109cf565b60808301525092915050565b6000610ae936836109fd565b9050919050565b6000610afb82610508565b9050919050565b610b0b81610af0565b8114610b1657600080fd5b50565b600081519050610b2881610b02565b92915050565b600081519050610b3d816107a7565b92915050565b600081519050610b52816108ea565b92915050565b60028110610b6557600080fd5b50565b600081519050610b7781610b58565b92915050565b60005b83811015610b9b578082015181840152602081019050610b80565b60008484015250505050565b6000610bba610bb5846107dd565b61075b565b905082815260208101848484011115610bd657610bd56107d8565b5b610be1848285610b7d565b509392505050565b600082601f830112610bfe57610bfd6107d3565b5b8151610c0e848260208601610ba7565b91505092915050565b600080600080600060a08688031215610c3357610c3261042a565b5b6000610c4188828901610b19565b9550506020610c5288828901610b2e565b9450506040610c6388828901610b43565b9350506060610c7488828901610b68565b925050608086015167ffffffffffffffff811115610c9557610c9461042f565b5b610ca188828901610be9565b9150509295509295909350565b600060208284031215610cc457610cc361042a565b5b6000610cd284828501610b43565b9150509291505056fea264697066735822122077be44fded1fd7f631725c5e25f85d0104a453313b308ad9fd1e15d1d0a50c4d64736f6c63430008170033";

type BasicMessageReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicMessageReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicMessageReceiver__factory extends ContractFactory {
  constructor(...args: BasicMessageReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(router, overrides || {});
  }
  override deploy(
    router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(router, overrides || {}) as Promise<
      BasicMessageReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BasicMessageReceiver__factory {
    return super.connect(runner) as BasicMessageReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicMessageReceiverInterface {
    return new Interface(_abi) as BasicMessageReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BasicMessageReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BasicMessageReceiver;
  }
}

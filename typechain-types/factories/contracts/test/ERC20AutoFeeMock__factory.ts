/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20AutoFeeMock,
  ERC20AutoFeeMockInterface,
} from "../../../contracts/test/ERC20AutoFeeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "newMultiplier",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_underlyingAmount",
        type: "uint256",
      },
    ],
    name: "getSharesByUnderlyingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sharesAmount",
        type: "uint256",
      },
    ],
    name: "getUnderlyingAmountByShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierUpdater",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newMultiplierUpdater",
        type: "address",
      },
    ],
    name: "setMultiplierUpdater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "sharesOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sharesAmount",
        type: "uint256",
      },
    ],
    name: "transferShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMultiplier",
        type: "uint256",
      },
    ],
    name: "updateMultiplierValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b6f38038062001b6f833981810160405281019062000037919062000209565b818181600390816200004a9190620004d9565b5080600490816200005c9190620004d9565b505050670de0b6b3a76400006006819055505050620005c0565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000df8262000094565b810181811067ffffffffffffffff82111715620001015762000100620000a5565b5b80604052505050565b60006200011662000076565b9050620001248282620000d4565b919050565b600067ffffffffffffffff821115620001475762000146620000a5565b5b620001528262000094565b9050602081019050919050565b60005b838110156200017f57808201518184015260208101905062000162565b60008484015250505050565b6000620001a26200019c8462000129565b6200010a565b905082815260208101848484011115620001c157620001c06200008f565b5b620001ce8482856200015f565b509392505050565b600082601f830112620001ee57620001ed6200008a565b5b8151620002008482602086016200018b565b91505092915050565b6000806040838503121562000223576200022262000080565b5b600083015167ffffffffffffffff81111562000244576200024362000085565b5b6200025285828601620001d6565b925050602083015167ffffffffffffffff81111562000276576200027562000085565b5b6200028485828601620001d6565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002e157607f821691505b602082108103620002f757620002f662000299565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000322565b6200036d868362000322565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003ba620003b4620003ae8462000385565b6200038f565b62000385565b9050919050565b6000819050919050565b620003d68362000399565b620003ee620003e582620003c1565b8484546200032f565b825550505050565b600090565b62000405620003f6565b62000412818484620003cb565b505050565b5b818110156200043a576200042e600082620003fb565b60018101905062000418565b5050565b601f82111562000489576200045381620002fd565b6200045e8462000312565b810160208510156200046e578190505b620004866200047d8562000312565b83018262000417565b50505b505050565b600082821c905092915050565b6000620004ae600019846008026200048e565b1980831691505092915050565b6000620004c983836200049b565b9150826002028217905092915050565b620004e4826200028e565b67ffffffffffffffff8111156200050057620004ff620000a5565b5b6200050c8254620002c8565b620005198282856200043e565b600060209050601f8311600181146200055157600084156200053c578287015190505b620005488582620004bb565b865550620005b8565b601f1984166200056186620002fd565b60005b828110156200058b5784890151825560018201915060208501945060208101905062000564565b86831015620005ab5784890151620005a7601f8916826200049b565b8355505b6001600288020188555050505b505050505050565b61159f80620005d06000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806344acb51b116100b85780639dc29fac1161007c5780639dc29fac14610366578063a9059cbb14610382578063beabacc8146103b2578063dd62ed3e146103ce578063f5eb42dc146103fe578063f5f688981461042e57610137565b806344acb51b1461028857806370a08231146102b85780638fcb4e5b146102e8578063944b511c1461031857806395d89b411461034857610137565b806323b872dd116100ff57806323b872dd146101e45780632b63c30014610214578063313ce5671461023257806340c10f1914610250578063447ed1c81461026c57610137565b80630194b09b1461013c57806306fdde031461015a578063095ea7b31461017857806318160ddd146101a85780631b3ed722146101c6575b600080fd5b61014461044a565b60405161015191906110a1565b60405180910390f35b610162610470565b60405161016f919061114c565b60405180910390f35b610192600480360381019061018d91906111d5565b610502565b60405161019f9190611230565b60405180910390f35b6101b0610525565b6040516101bd919061125a565b60405180910390f35b6101ce610544565b6040516101db919061125a565b60405180910390f35b6101fe60048036038101906101f99190611275565b61054a565b60405161020b9190611230565b60405180910390f35b61021c610579565b604051610229919061125a565b60405180910390f35b61023a610583565b60405161024791906112e4565b60405180910390f35b61026a600480360381019061026591906111d5565b61058c565b005b610286600480360381019061028191906112ff565b610610565b005b6102a2600480360381019061029d91906112ff565b61061c565b6040516102af919061125a565b60405180910390f35b6102d260048036038101906102cd919061132c565b61063b565b6040516102df919061125a565b60405180910390f35b61030260048036038101906102fd91906111d5565b610662565b60405161030f9190611230565b60405180910390f35b610332600480360381019061032d91906112ff565b610696565b60405161033f919061125a565b60405180910390f35b6103506106b5565b60405161035d919061114c565b60405180910390f35b610380600480360381019061037b91906111d5565b610747565b005b61039c600480360381019061039791906111d5565b610800565b6040516103a99190611230565b60405180910390f35b6103cc60048036038101906103c79190611275565b610823565b005b6103e860048036038101906103e39190611359565b610952565b6040516103f5919061125a565b60405180910390f35b6104186004803603810190610413919061132c565b6109d9565b604051610425919061125a565b60405180910390f35b6104486004803603810190610443919061132c565b610a22565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606003805461047f906113c8565b80601f01602080910402602001604051908101604052809291908181526020018280546104ab906113c8565b80156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b5050505050905090565b60008061050d610a66565b905061051a818585610a6e565b600191505092915050565b600080610530610579565b905061053e60085482610a80565b91505090565b60065481565b600080610555610a66565b9050610562858285610aa9565b61056d858585610823565b60019150509392505050565b6000600654905090565b60006012905090565b600061059a82600654610b3d565b905080600860008282546105ae9190611428565b9250508190555080600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106049190611428565b92505081905550505050565b61061981610b66565b50565b600080610627610579565b90506106338382610b3d565b915050919050565b600080610646610579565b905061065a610654846109d9565b82610a80565b915050919050565b60008061066d610a66565b9050600061067d84600654610a80565b905061068a828683610823565b60019250505092915050565b6000806106a1610579565b90506106ad8382610a80565b915050919050565b6060600480546106c4906113c8565b80601f01602080910402602001604051908101604052809291908181526020018280546106f0906113c8565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b5050505050905090565b600061075582600654610b3d565b90506000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818103600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860008282546107f3919061145c565b9250508190555050505050565b60008061080b610a66565b9050610818818585610b70565b600191505092915050565b600061083182600654610b3d565b90506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818103600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109089190611428565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b610a7b8383836001610c64565b505050565b6000670de0b6b3a76400008284610a979190611490565b610aa19190611501565b905092915050565b6000610ab58484610952565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b375781811015610b27578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610b1e93929190611532565b60405180910390fd5b610b3684848484036000610c64565b5b50505050565b600081670de0b6b3a764000084610b549190611490565b610b5e9190611501565b905092915050565b8060068190555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610be25760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610bd991906110a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c545760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610c4b91906110a1565b60405180910390fd5b610c5f838383610e3b565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610cd65760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610ccd91906110a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d485760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610d3f91906110a1565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610e35578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610e2c919061125a565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e8d578060026000828254610e819190611428565b92505081905550610f60565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f19578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610f1093929190611532565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fa95780600260008282540392505081905550610ff6565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611053919061125a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108b82611060565b9050919050565b61109b81611080565b82525050565b60006020820190506110b66000830184611092565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f65780820151818401526020810190506110db565b60008484015250505050565b6000601f19601f8301169050919050565b600061111e826110bc565b61112881856110c7565b93506111388185602086016110d8565b61114181611102565b840191505092915050565b600060208201905081810360008301526111668184611113565b905092915050565b600080fd5b61117c81611080565b811461118757600080fd5b50565b60008135905061119981611173565b92915050565b6000819050919050565b6111b28161119f565b81146111bd57600080fd5b50565b6000813590506111cf816111a9565b92915050565b600080604083850312156111ec576111eb61116e565b5b60006111fa8582860161118a565b925050602061120b858286016111c0565b9150509250929050565b60008115159050919050565b61122a81611215565b82525050565b60006020820190506112456000830184611221565b92915050565b6112548161119f565b82525050565b600060208201905061126f600083018461124b565b92915050565b60008060006060848603121561128e5761128d61116e565b5b600061129c8682870161118a565b93505060206112ad8682870161118a565b92505060406112be868287016111c0565b9150509250925092565b600060ff82169050919050565b6112de816112c8565b82525050565b60006020820190506112f960008301846112d5565b92915050565b6000602082840312156113155761131461116e565b5b6000611323848285016111c0565b91505092915050565b6000602082840312156113425761134161116e565b5b60006113508482850161118a565b91505092915050565b600080604083850312156113705761136f61116e565b5b600061137e8582860161118a565b925050602061138f8582860161118a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113e057607f821691505b6020821081036113f3576113f2611399565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114338261119f565b915061143e8361119f565b9250828201905080821115611456576114556113f9565b5b92915050565b60006114678261119f565b91506114728361119f565b925082820390508181111561148a576114896113f9565b5b92915050565b600061149b8261119f565b91506114a68361119f565b92508282026114b48161119f565b915082820484148315176114cb576114ca6113f9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061150c8261119f565b91506115178361119f565b925082611527576115266114d2565b5b828204905092915050565b60006060820190506115476000830186611092565b611554602083018561124b565b611561604083018461124b565b94935050505056fea264697066735822122048d1e9bd24acdddc3b7ba11b7a80fcacfdfdfc55cfcfce2bd6c83177dac98dcc64736f6c63430008170033";

type ERC20AutoFeeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20AutoFeeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20AutoFeeMock__factory extends ContractFactory {
  constructor(...args: ERC20AutoFeeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      ERC20AutoFeeMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20AutoFeeMock__factory {
    return super.connect(runner) as ERC20AutoFeeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20AutoFeeMockInterface {
    return new Interface(_abi) as ERC20AutoFeeMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20AutoFeeMock {
    return new Contract(address, _abi, runner) as unknown as ERC20AutoFeeMock;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20AutoFeeMock,
  ERC20AutoFeeMockInterface,
} from "../../../contracts/test/ERC20AutoFeeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "newMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newMultiplierNonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_underlyingAmount",
        type: "uint256",
      },
    ],
    name: "getSharesByUnderlyingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sharesAmount",
        type: "uint256",
      },
    ],
    name: "getUnderlyingAmountByShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierUpdater",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newMultiplierUpdater",
        type: "address",
      },
    ],
    name: "setMultiplierUpdater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "sharesOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sharesAmount",
        type: "uint256",
      },
    ],
    name: "transferShares",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMultiplier",
        type: "uint256",
      },
    ],
    name: "updateMultiplierValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMultiplier",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "updateMultiplierWithNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c5f38038062001c5f833981810160405281019062000037919062000209565b818181600390816200004a9190620004d9565b5080600490816200005c9190620004d9565b505050670de0b6b3a76400006006819055505050620005c0565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000df8262000094565b810181811067ffffffffffffffff82111715620001015762000100620000a5565b5b80604052505050565b60006200011662000076565b9050620001248282620000d4565b919050565b600067ffffffffffffffff821115620001475762000146620000a5565b5b620001528262000094565b9050602081019050919050565b60005b838110156200017f57808201518184015260208101905062000162565b60008484015250505050565b6000620001a26200019c8462000129565b6200010a565b905082815260208101848484011115620001c157620001c06200008f565b5b620001ce8482856200015f565b509392505050565b600082601f830112620001ee57620001ed6200008a565b5b8151620002008482602086016200018b565b91505092915050565b6000806040838503121562000223576200022262000080565b5b600083015167ffffffffffffffff81111562000244576200024362000085565b5b6200025285828601620001d6565b925050602083015167ffffffffffffffff81111562000276576200027562000085565b5b6200028485828601620001d6565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002e157607f821691505b602082108103620002f757620002f662000299565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000322565b6200036d868362000322565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003ba620003b4620003ae8462000385565b6200038f565b62000385565b9050919050565b6000819050919050565b620003d68362000399565b620003ee620003e582620003c1565b8484546200032f565b825550505050565b600090565b62000405620003f6565b62000412818484620003cb565b505050565b5b818110156200043a576200042e600082620003fb565b60018101905062000418565b5050565b601f82111562000489576200045381620002fd565b6200045e8462000312565b810160208510156200046e578190505b620004866200047d8562000312565b83018262000417565b50505b505050565b600082821c905092915050565b6000620004ae600019846008026200048e565b1980831691505092915050565b6000620004c983836200049b565b9150826002028217905092915050565b620004e4826200028e565b67ffffffffffffffff8111156200050057620004ff620000a5565b5b6200050c8254620002c8565b620005198282856200043e565b600060209050601f8311600181146200055157600084156200053c578287015190505b620005488582620004bb565b865550620005b8565b601f1984166200056186620002fd565b60005b828110156200058b5784890151825560018201915060208501945060208101905062000564565b86831015620005ab5784890151620005a7601f8916826200049b565b8355505b6001600288020188555050505b505050505050565b61168f80620005d06000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806344acb51b116100c3578063a9059cbb1161007c578063a9059cbb146103b5578063beabacc8146103e5578063dd62ed3e14610401578063f5eb42dc14610431578063f5f6889814610461578063f9e478961461047d5761014d565b806344acb51b146102bb57806370a08231146102eb5780638fcb4e5b1461031b578063944b511c1461034b57806395d89b411461037b5780639dc29fac146103995761014d565b80631b3ed722116101155780631b3ed722146101f857806323b872dd146102165780632b63c30014610246578063313ce5671461026557806340c10f1914610283578063447ed1c81461029f5761014d565b80630194b09b1461015257806306fdde0314610170578063095ea7b31461018e5780631281f3e0146101be57806318160ddd146101da575b600080fd5b61015a61049b565b6040516101679190611128565b60405180910390f35b6101786104c1565b60405161018591906111d3565b60405180910390f35b6101a860048036038101906101a3919061125c565b610553565b6040516101b591906112b7565b60405180910390f35b6101d860048036038101906101d391906112d2565b610576565b005b6101e2610584565b6040516101ef9190611321565b60405180910390f35b6102006105a4565b60405161020d9190611321565b60405180910390f35b610230600480360381019061022b919061133c565b6105aa565b60405161023d91906112b7565b60405180910390f35b61024e6105d9565b60405161025c92919061138f565b60405180910390f35b61026d6105ea565b60405161027a91906113d4565b60405180910390f35b61029d6004803603810190610298919061125c565b6105f3565b005b6102b960048036038101906102b491906113ef565b610677565b005b6102d560048036038101906102d091906113ef565b610692565b6040516102e29190611321565b60405180910390f35b6103056004803603810190610300919061141c565b6106b2565b6040516103129190611321565b60405180910390f35b6103356004803603810190610330919061125c565b6106da565b60405161034291906112b7565b60405180910390f35b610365600480360381019061036091906113ef565b61070e565b6040516103729190611321565b60405180910390f35b61038361072e565b60405161039091906111d3565b60405180910390f35b6103b360048036038101906103ae919061125c565b6107c0565b005b6103cf60048036038101906103ca919061125c565b610879565b6040516103dc91906112b7565b60405180910390f35b6103ff60048036038101906103fa919061133c565b61089c565b005b61041b60048036038101906104169190611449565b6109cb565b6040516104289190611321565b60405180910390f35b61044b6004803603810190610446919061141c565b610a52565b6040516104589190611321565b60405180910390f35b61047b6004803603810190610476919061141c565b610a9b565b005b610485610adf565b6040516104929190611321565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380546104d0906114b8565b80601f01602080910402602001604051908101604052809291908181526020018280546104fc906114b8565b80156105495780601f1061051e57610100808354040283529160200191610549565b820191906000526020600020905b81548152906001019060200180831161052c57829003601f168201915b5050505050905090565b60008061055e610ae5565b905061056b818585610aed565b600191505092915050565b6105808282610aff565b5050565b60008061058f6105d9565b50905061059e60095482610b11565b91505090565b60065481565b6000806105b5610ae5565b90506105c2858285610b3a565b6105cd85858561089c565b60019150509392505050565b600080600654915060075490509091565b60006012905090565b600061060182600654610bce565b905080600960008282546106159190611518565b9250508190555080600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461066b9190611518565b92505081905550505050565b61068f81600160075461068a9190611518565b610aff565b50565b60008061069d6105d9565b5090506106aa8382610bce565b915050919050565b6000806106bd6105d9565b5090506106d26106cc84610a52565b82610b11565b915050919050565b6000806106e5610ae5565b905060006106f584600654610b11565b905061070282868361089c565b60019250505092915050565b6000806107196105d9565b5090506107268382610b11565b915050919050565b60606004805461073d906114b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610769906114b8565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b5050505050905090565b60006107ce82600654610bce565b90506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818103600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816009600082825461086c919061154c565b9250508190555050505050565b600080610884610ae5565b9050610891818585610bf7565b600191505092915050565b60006108aa82600654610bce565b90506000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818103600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109819190611518565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b600033905090565b610afa8383836001610ceb565b505050565b81600681905550806007819055505050565b6000670de0b6b3a76400008284610b289190611580565b610b3291906115f1565b905092915050565b6000610b4684846109cb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610bc85781811015610bb8578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610baf93929190611622565b60405180910390fd5b610bc784848484036000610ceb565b5b50505050565b600081670de0b6b3a764000084610be59190611580565b610bef91906115f1565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c695760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c609190611128565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cdb5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610cd29190611128565b60405180910390fd5b610ce6838383610ec2565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610d5d5760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610d549190611128565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610dcf5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610dc69190611128565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610ebc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610eb39190611321565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f14578060026000828254610f089190611518565b92505081905550610fe7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610fa0578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610f9793929190611622565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611030578060026000828254039250508190555061107d565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110da9190611321565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611112826110e7565b9050919050565b61112281611107565b82525050565b600060208201905061113d6000830184611119565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561117d578082015181840152602081019050611162565b60008484015250505050565b6000601f19601f8301169050919050565b60006111a582611143565b6111af818561114e565b93506111bf81856020860161115f565b6111c881611189565b840191505092915050565b600060208201905081810360008301526111ed818461119a565b905092915050565b600080fd5b61120381611107565b811461120e57600080fd5b50565b600081359050611220816111fa565b92915050565b6000819050919050565b61123981611226565b811461124457600080fd5b50565b60008135905061125681611230565b92915050565b60008060408385031215611273576112726111f5565b5b600061128185828601611211565b925050602061129285828601611247565b9150509250929050565b60008115159050919050565b6112b18161129c565b82525050565b60006020820190506112cc60008301846112a8565b92915050565b600080604083850312156112e9576112e86111f5565b5b60006112f785828601611247565b925050602061130885828601611247565b9150509250929050565b61131b81611226565b82525050565b60006020820190506113366000830184611312565b92915050565b600080600060608486031215611355576113546111f5565b5b600061136386828701611211565b935050602061137486828701611211565b925050604061138586828701611247565b9150509250925092565b60006040820190506113a46000830185611312565b6113b16020830184611312565b9392505050565b600060ff82169050919050565b6113ce816113b8565b82525050565b60006020820190506113e960008301846113c5565b92915050565b600060208284031215611405576114046111f5565b5b600061141384828501611247565b91505092915050565b600060208284031215611432576114316111f5565b5b600061144084828501611211565b91505092915050565b600080604083850312156114605761145f6111f5565b5b600061146e85828601611211565b925050602061147f85828601611211565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114d057607f821691505b6020821081036114e3576114e2611489565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152382611226565b915061152e83611226565b9250828201905080821115611546576115456114e9565b5b92915050565b600061155782611226565b915061156283611226565b925082820390508181111561157a576115796114e9565b5b92915050565b600061158b82611226565b915061159683611226565b92508282026115a481611226565b915082820484148315176115bb576115ba6114e9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115fc82611226565b915061160783611226565b925082611617576116166115c2565b5b828204905092915050565b60006060820190506116376000830186611119565b6116446020830185611312565b6116516040830184611312565b94935050505056fea26469706673582212205dbe6f65332992da8bde888798818836b662cde50b3a1091489875b3a8d7ba7564736f6c63430008170033";

type ERC20AutoFeeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20AutoFeeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20AutoFeeMock__factory extends ContractFactory {
  constructor(...args: ERC20AutoFeeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      ERC20AutoFeeMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20AutoFeeMock__factory {
    return super.connect(runner) as ERC20AutoFeeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20AutoFeeMockInterface {
    return new Interface(_abi) as ERC20AutoFeeMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20AutoFeeMock {
    return new Contract(address, _abi, runner) as unknown as ERC20AutoFeeMock;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface BackedCCIPReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowlistedDestinationChains"
      | "allowlistedSourceChains"
      | "ccipReceive"
      | "custodyWallet"
      | "gasLimit"
      | "getDeliveryFeeCost"
      | "getRouter"
      | "initialize"
      | "owner"
      | "pause"
      | "paused"
      | "registerDestinationChain"
      | "registerSourceChain"
      | "registerToken"
      | "removeDestinationChain"
      | "removeSourceChain"
      | "removeToken"
      | "renounceOwnership"
      | "send"
      | "supportsInterface"
      | "tokenInfos"
      | "tokens"
      | "transferOwnership"
      | "unpause"
      | "updateCustodyWallet"
      | "updateGasLimit"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CustodyWalletUpdated"
      | "DestinationChainRegistered"
      | "DestinationChainRemoved"
      | "GasLimitUpdated"
      | "Initialized"
      | "InvalidMessageReceived"
      | "MessageReceived"
      | "MessageSent"
      | "OwnershipTransferred"
      | "Paused"
      | "SourceChainRegistered"
      | "SourceChainRemoved"
      | "TokenRegistered"
      | "TokenRemoved"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowlistedDestinationChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSourceChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "custodyWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDeliveryFeeCost",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDestinationChain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSourceChain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDestinationChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSourceChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCustodyWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowlistedDestinationChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSourceChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "custodyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeliveryFeeCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDestinationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDestinationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCustodyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace CustodyWalletUpdatedEvent {
  export type InputTuple = [newCustodywallet: AddressLike];
  export type OutputTuple = [newCustodywallet: string];
  export interface OutputObject {
    newCustodywallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DestinationChainRegisteredEvent {
  export type InputTuple = [
    destinationChainSelector: BigNumberish,
    destinationChainReceiver: AddressLike
  ];
  export type OutputTuple = [
    destinationChainSelector: bigint,
    destinationChainReceiver: string
  ];
  export interface OutputObject {
    destinationChainSelector: bigint;
    destinationChainReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DestinationChainRemovedEvent {
  export type InputTuple = [destinationChainSelector: BigNumberish];
  export type OutputTuple = [destinationChainSelector: bigint];
  export interface OutputObject {
    destinationChainSelector: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasLimitUpdatedEvent {
  export type InputTuple = [newGasLimit: BigNumberish];
  export type OutputTuple = [newGasLimit: bigint];
  export interface OutputObject {
    newGasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvalidMessageReceivedEvent {
  export type InputTuple = [messageId: BytesLike, reason: BigNumberish];
  export type OutputTuple = [messageId: string, reason: bigint];
  export interface OutputObject {
    messageId: string;
    reason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    messageId: BytesLike,
    sourceChainSelector: BigNumberish,
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    variant: BigNumberish,
    tokenReceiver: AddressLike,
    payload: BytesLike
  ];
  export type OutputTuple = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    token: string,
    amount: bigint,
    variant: bigint,
    tokenReceiver: string,
    payload: string
  ];
  export interface OutputObject {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    token: string;
    amount: bigint;
    variant: bigint;
    tokenReceiver: string;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    messageId: BytesLike,
    destinationChainSelector: BigNumberish,
    receiver: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish,
    variant: BigNumberish,
    payload: BytesLike
  ];
  export type OutputTuple = [
    messageId: string,
    destinationChainSelector: bigint,
    receiver: string,
    tokenId: bigint,
    amount: bigint,
    variant: bigint,
    payload: string
  ];
  export interface OutputObject {
    messageId: string;
    destinationChainSelector: bigint;
    receiver: string;
    tokenId: bigint;
    amount: bigint;
    variant: bigint;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceChainRegisteredEvent {
  export type InputTuple = [
    sourceChainSelector: BigNumberish,
    sourceChainSender: AddressLike
  ];
  export type OutputTuple = [
    sourceChainSelector: bigint,
    sourceChainSender: string
  ];
  export interface OutputObject {
    sourceChainSelector: bigint;
    sourceChainSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceChainRemovedEvent {
  export type InputTuple = [sourceChainSelector: BigNumberish];
  export type OutputTuple = [sourceChainSelector: bigint];
  export interface OutputObject {
    sourceChainSelector: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRegisteredEvent {
  export type InputTuple = [token: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [token: string, tokenId: bigint];
  export interface OutputObject {
    token: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [token: string, tokenId: bigint];
  export interface OutputObject {
    token: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BackedCCIPReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): BackedCCIPReceiver;
  waitForDeployment(): Promise<this>;

  interface: BackedCCIPReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowlistedDestinationChains: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allowlistedSourceChains: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  ccipReceive: TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;

  custodyWallet: TypedContractMethod<[], [string], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getDeliveryFeeCost: TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _tokenReceiver: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getRouter: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_router: AddressLike, _custody: AddressLike, _gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerDestinationChain: TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _destinationChainReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  registerSourceChain: TypedContractMethod<
    [_sourceChainSelector: BigNumberish, _sourceChainSender: AddressLike],
    [void],
    "nonpayable"
  >;

  registerToken: TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish, _variant: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeDestinationChain: TypedContractMethod<
    [_destinationChainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeSourceChain: TypedContractMethod<
    [_sourceChainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  send: TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _tokenReceiver: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [string],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenInfos: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { id: bigint; variant: bigint }],
    "view"
  >;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCustodyWallet: TypedContractMethod<
    [_custody: AddressLike],
    [void],
    "nonpayable"
  >;

  updateGasLimit: TypedContractMethod<
    [_gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowlistedDestinationChains"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allowlistedSourceChains"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<
    [message: Client.Any2EVMMessageStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "custodyWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDeliveryFeeCost"
  ): TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _tokenReceiver: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_router: AddressLike, _custody: AddressLike, _gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDestinationChain"
  ): TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _destinationChainReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSourceChain"
  ): TypedContractMethod<
    [_sourceChainSelector: BigNumberish, _sourceChainSender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerToken"
  ): TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish, _variant: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeDestinationChain"
  ): TypedContractMethod<
    [_destinationChainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSourceChain"
  ): TypedContractMethod<
    [_sourceChainSelector: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _destinationChainSelector: BigNumberish,
      _tokenReceiver: AddressLike,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenInfos"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { id: bigint; variant: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCustodyWallet"
  ): TypedContractMethod<[_custody: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGasLimit"
  ): TypedContractMethod<[_gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CustodyWalletUpdated"
  ): TypedContractEvent<
    CustodyWalletUpdatedEvent.InputTuple,
    CustodyWalletUpdatedEvent.OutputTuple,
    CustodyWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DestinationChainRegistered"
  ): TypedContractEvent<
    DestinationChainRegisteredEvent.InputTuple,
    DestinationChainRegisteredEvent.OutputTuple,
    DestinationChainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DestinationChainRemoved"
  ): TypedContractEvent<
    DestinationChainRemovedEvent.InputTuple,
    DestinationChainRemovedEvent.OutputTuple,
    DestinationChainRemovedEvent.OutputObject
  >;
  getEvent(
    key: "GasLimitUpdated"
  ): TypedContractEvent<
    GasLimitUpdatedEvent.InputTuple,
    GasLimitUpdatedEvent.OutputTuple,
    GasLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InvalidMessageReceived"
  ): TypedContractEvent<
    InvalidMessageReceivedEvent.InputTuple,
    InvalidMessageReceivedEvent.OutputTuple,
    InvalidMessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SourceChainRegistered"
  ): TypedContractEvent<
    SourceChainRegisteredEvent.InputTuple,
    SourceChainRegisteredEvent.OutputTuple,
    SourceChainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SourceChainRemoved"
  ): TypedContractEvent<
    SourceChainRemovedEvent.InputTuple,
    SourceChainRemovedEvent.OutputTuple,
    SourceChainRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRegistered"
  ): TypedContractEvent<
    TokenRegisteredEvent.InputTuple,
    TokenRegisteredEvent.OutputTuple,
    TokenRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CustodyWalletUpdated(address)": TypedContractEvent<
      CustodyWalletUpdatedEvent.InputTuple,
      CustodyWalletUpdatedEvent.OutputTuple,
      CustodyWalletUpdatedEvent.OutputObject
    >;
    CustodyWalletUpdated: TypedContractEvent<
      CustodyWalletUpdatedEvent.InputTuple,
      CustodyWalletUpdatedEvent.OutputTuple,
      CustodyWalletUpdatedEvent.OutputObject
    >;

    "DestinationChainRegistered(uint64,address)": TypedContractEvent<
      DestinationChainRegisteredEvent.InputTuple,
      DestinationChainRegisteredEvent.OutputTuple,
      DestinationChainRegisteredEvent.OutputObject
    >;
    DestinationChainRegistered: TypedContractEvent<
      DestinationChainRegisteredEvent.InputTuple,
      DestinationChainRegisteredEvent.OutputTuple,
      DestinationChainRegisteredEvent.OutputObject
    >;

    "DestinationChainRemoved(uint64)": TypedContractEvent<
      DestinationChainRemovedEvent.InputTuple,
      DestinationChainRemovedEvent.OutputTuple,
      DestinationChainRemovedEvent.OutputObject
    >;
    DestinationChainRemoved: TypedContractEvent<
      DestinationChainRemovedEvent.InputTuple,
      DestinationChainRemovedEvent.OutputTuple,
      DestinationChainRemovedEvent.OutputObject
    >;

    "GasLimitUpdated(uint256)": TypedContractEvent<
      GasLimitUpdatedEvent.InputTuple,
      GasLimitUpdatedEvent.OutputTuple,
      GasLimitUpdatedEvent.OutputObject
    >;
    GasLimitUpdated: TypedContractEvent<
      GasLimitUpdatedEvent.InputTuple,
      GasLimitUpdatedEvent.OutputTuple,
      GasLimitUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InvalidMessageReceived(bytes32,uint8)": TypedContractEvent<
      InvalidMessageReceivedEvent.InputTuple,
      InvalidMessageReceivedEvent.OutputTuple,
      InvalidMessageReceivedEvent.OutputObject
    >;
    InvalidMessageReceived: TypedContractEvent<
      InvalidMessageReceivedEvent.InputTuple,
      InvalidMessageReceivedEvent.OutputTuple,
      InvalidMessageReceivedEvent.OutputObject
    >;

    "MessageReceived(bytes32,uint64,address,address,uint256,uint8,address,bytes)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(bytes32,uint64,address,uint64,uint256,uint8,bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SourceChainRegistered(uint64,address)": TypedContractEvent<
      SourceChainRegisteredEvent.InputTuple,
      SourceChainRegisteredEvent.OutputTuple,
      SourceChainRegisteredEvent.OutputObject
    >;
    SourceChainRegistered: TypedContractEvent<
      SourceChainRegisteredEvent.InputTuple,
      SourceChainRegisteredEvent.OutputTuple,
      SourceChainRegisteredEvent.OutputObject
    >;

    "SourceChainRemoved(uint64)": TypedContractEvent<
      SourceChainRemovedEvent.InputTuple,
      SourceChainRemovedEvent.OutputTuple,
      SourceChainRemovedEvent.OutputObject
    >;
    SourceChainRemoved: TypedContractEvent<
      SourceChainRemovedEvent.InputTuple,
      SourceChainRemovedEvent.OutputTuple,
      SourceChainRemovedEvent.OutputObject
    >;

    "TokenRegistered(address,uint64)": TypedContractEvent<
      TokenRegisteredEvent.InputTuple,
      TokenRegisteredEvent.OutputTuple,
      TokenRegisteredEvent.OutputObject
    >;
    TokenRegistered: TypedContractEvent<
      TokenRegisteredEvent.InputTuple,
      TokenRegisteredEvent.OutputTuple,
      TokenRegisteredEvent.OutputObject
    >;

    "TokenRemoved(address,uint64)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
